services:
  # my-postgres:
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U postgres"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   container_name: my-postgres
  #   image: postgres:16
  #   environment:
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  #   networks:
  #     - transcendence
  #   volumes:
  #     - db-volume:/var/lib/postgresql/data
  #   restart: always
  # website:
  #   depends_on:
  #     my-postgres:
  #       condition: service_healthy
  #   container_name: website
  #   build: ./website/
  #   volumes:
  #     - ./website:/app
  #     - static-volume:/app/staticfiles
  #   expose:
  #     - 8000
  #   environment:
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  #   networks:
  #     - transcendence
  #   restart: always

  daphne:
    container_name: daphne
    build: ./daphne/
    volumes:
      - ./website:/app
    expose:
      - 9000
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - transcendence
    restart: always
  
  user_management:
    depends_on:
      user_management_db:
        condition: service_healthy
    container_name: user_management
    build: ./user_management/
    volumes:
      - ./user_management:/app
      # - static-volume:/app/staticfiles
      # - media-volume:/app/test_media
      - uploaded-volume:/app/mediafiles
    # expose:
    #   - 8001
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - transcendence
    restart: always
  
  user_management_db:
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    container_name: user_management_db
    image: postgres:16
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - transcendence
    volumes:
      - user-db:/var/lib/postgresql/data
    restart: always

  nginx:
    container_name: nginx
    build: ./nginx
    ports:
      - 1337:80
    # depends_on:
    #   - website
    restart: always
    networks:
      - transcendence
    # volumes:
    #   - static-volume:/app/staticfiles
    #   - media-volume:/app/mediafiles

  redis:
    container_name: redis
    image: redis
    build: ./redis/
    expose:
      - 6379
    networks:
      - transcendence
    restart: always

  authentication:
    depends_on:
      user_management_db:
        condition: service_healthy
    container_name: authentication
    build: ./authentication/
    volumes:
      - ./authentication:/app
      # - static-volume:/app/staticfiles
      # - media-volume:/app/test_media
      - uploaded-volume:/app/mediafiles
    # expose:
    #   - 8002
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - transcendence
    restart: always
  
 # pong:
 #   container_name: pong
 #   build: ./pong/
 #   volumes:
 #     - ./pong:/pong
 #   env_file:
 #     - .env
 #   depends_on:
 #     my-postgres:
 #       condition: service_healthy
 #   networks:
 #     - transcendence
 #   restart: always
    
networks:
  transcendence:
    name: transcendence
    driver: bridge

volumes:
  db-volume:
    driver_opts:
      o: bind
      type: none
      device: ${HOME}/data/db-volume
  user-db:
    driver_opts:
        o: bind
        type: none
        device: ${HOME}/data/user-db
  uploaded-volume:
    driver_opts:
      o: bind
      type: none
      device: ${HOME}/data/media
  # static-volume:
  # media-volume:

  
